var request = require("request");
var conf = require("../../config/config");
var soapClient = require("../client/SOAPClient");
var errorFactory = require('../error/ErrorFactory');
var path = require('path');
var Logger = require('../logger/logger');
var log = new Logger().getSystemLogger();

/**
 * Sets the options for OAuth access token request
 *
 * @param url
 * @param consumer
 * @param secret
 * @param form
 * @returns {Object} The request options
 */
function setRequestOptions(url, consumer, secret, form) {
    return {
        url: url,
        gzip: true,
        method: 'POST',
        auth: {
            user: consumer,
            pass: secret
        },
        rejectUnauthorized: false,
        timeout: conf.requests.timeout,
        form: form,
        json: true
    }
}

/**
 * Gets IS OAuth Access Token
 *
 * @param user
 * @param pass
 * @param consumer
 * @param secret
 * @returns {Promise}
 */
function getOAuthAccessToken(user, pass, consumer, secret) {
    return new Promise(function (resolve, reject) {
        var url = conf.ISHost + ':' + conf.isPort + conf.oAuthRequestToken.path;
        var form = {
            grant_type: conf.oAuthRequestToken.grant_type,
            username: user,
            password: pass
        };
        var options = setRequestOptions(url, consumer, secret, form);
        request(options, function (error, response, body) {
            if (error) {
                log.error(error);
                return reject(errorFactory.internalError(error.message));
            } else if (body.error) {
                var err = errorFactory.requestErrorMessage(body.error_description);
                log.error('Request OAuth Token error: ' + err);
                return reject(err);
            } else {
                log.debug('Request OAuth Token response: ' + JSON.stringify(body));
                return resolve(body);
            }
        });
    });
}

/**
 * Revokes IS OAuth Access Token
 *
 * @param token
 * @param consumer
 * @param secret
 * @returns {Promise}
 */
function revokeOAuthAccessToken(token, consumer, secret) {
    return new Promise(function (resolve, reject) {
        var url = conf.ISHost + ':' + conf.isPort + conf.oAuthRevokeToken.path;
        var form = {
            token: token,
            grant_type: conf.oAuthRequestToken.grant_type
        };
        var options = setRequestOptions(url, consumer, secret, form);
        request(options, function (error, response, body) {
            if (error) {
                log.error(error);
                return reject(errorFactory.internalError(error.message));
            } else if (body && body.error) {
                var err = errorFactory.requestErrorMessage(body.error_description);
                log.error('Revoke OAuth Token error: ' + err);
                return reject(err);
            } else {
                return resolve();
            }
        });
    });
}

/**
 * Sets the SOAP JWT request values
 *
 * @param identifier
 * @param opt
 * @returns {{validationReqDTO: {accessToken: {identifier: *, tokenType: string}, requiredClaimURIs: (*|Array)}}}
 */
function setSOAPJWTRequestValues(identifier, opt) {
    return {
        validationReqDTO: {
            accessToken: {
                identifier: identifier,
                tokenType: conf.soapJWTValidate.tokenType
            },
            requiredClaimURIs: opt || conf.soapJWTValidate.requiredClaimURIs
        }
    }
}

/**
 * Gets a JSON Web Token generated by the identity server
 *
 * @param identifier
 * @param opt
 * @returns {Promise}
 */
function getValidJWT(identifier, opt) {
    return new Promise(function (resolve, reject) {
        var file = path.join(__dirname, conf.soapJWTValidate.wsdlFile);
        var url = conf.ISHost + ':' + conf.isPort + conf.soapJWTValidate.path;
        soapClient.call(file, url, conf.soapJWTValidate.user, conf.soapJWTValidate.pass,
            setSOAPJWTRequestValues(identifier, opt), conf.soapJWTValidate.method, conf.soapJWTValidate.resultObject,
            conf.soapJWTValidate.errorObject, conf.soapJWTValidate.timeout)
            .then(function (result) {
                return resolve(result);
            }).catch(function (error) {
          return reject(error);
        });
    });
}

/**
 * Public interface
 * @type {{getOAuthAccessToken: getOAuthAccessToken, revokeOAuthAccessToken: revokeOAuthAccessToken, getJWT: getValidJWT}}
 */
module.exports = {
    getOAuthAccessToken: getOAuthAccessToken,
    revokeOAuthAccessToken: revokeOAuthAccessToken,
    getValidJWT: getValidJWT
};

